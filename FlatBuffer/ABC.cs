// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Sample
{

using global::System;
using global::FlatBuffers;

public struct Abc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Abc GetRootAsAbc(ByteBuffer _bb) { return GetRootAsAbc(_bb, new Abc()); }
  public static Abc GetRootAsAbc(ByteBuffer _bb, Abc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Abc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Abc> CreateAbc(FlatBufferBuilder builder,
      int x = 0,
      int y = 0,
      int z = 0) {
    builder.StartObject(3);
    Abc.AddZ(builder, z);
    Abc.AddY(builder, y);
    Abc.AddX(builder, x);
    return Abc.EndAbc(builder);
  }

  public static void StartAbc(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(1, y, 0); }
  public static void AddZ(FlatBufferBuilder builder, int z) { builder.AddInt(2, z, 0); }
  public static Offset<Abc> EndAbc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Abc>(o);
  }
  public static void FinishAbcBuffer(FlatBufferBuilder builder, Offset<Abc> offset) { builder.Finish(offset.Value); }
};


}
